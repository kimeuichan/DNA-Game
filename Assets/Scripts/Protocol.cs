// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DnaInfo {

  /// <summary>Holder for reflection information generated from protocol.proto</summary>
  public static partial class ProtocolReflection {

    #region Descriptor
    /// <summary>File descriptor for protocol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtocolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5wcm90b2NvbC5wcm90bxIIZG5hX2luZm8iOwoPUGFja2V0SGVhZGVyX1BC",
            "EhMKC3BhY2tldF9zaXplGAEgASgNEhMKC3BhY2tldF90eXBlGAIgASgFIioK",
            "DExvZ2luUmVxdWVzdBIKCgJpZBgCIAEoCRIOCgZwYXNzd2QYAyABKAkiJgoN",
            "TG9naW5SZXNwb25zZRIVCg1yZXNwb25zZV9jb2RlGAIgASgFIkkKCFVzZXJJ",
            "bmZvEhMKC2lkZW50aWZ5X2lkGAIgASgFEhMKC2NoYW5uZWxfbnVtGAMgASgF",
            "EhMKC3Nlc3Npb25fbnVtGAQgASgFIsUBCgpTeW5jSW5mb19TEigKBXVzZXJz",
            "GAIgAygLMhkuZG5hX2luZm8uU3luY0luZm9fUy5Vc2VyGowBCgRVc2VyEg8K",
            "B3VzZXJfaWQYASABKAUSDQoFeF9wb3MYAiABKAUSDQoFeV9wb3MYAyABKAUS",
            "CwoDdmVjGAQgASgFEgwKBHR5cGUYBSABKAUSEgoKQV90eXBlX3BvdxgGIAEo",
            "BRISCgpCX3R5cGVfcG93GAcgASgFEhIKCkNfdHlwZV9wb3cYCCABKAUikgEK",
            "ClN5bmNJbmZvX0MSDwoHdXNlcl9pZBgBIAEoBRINCgV4X3BvcxgCIAEoBRIN",
            "CgV5X3BvcxgDIAEoBRILCgN2ZWMYBCABKAUSDAoEdHlwZRgFIAEoBRISCgpB",
            "X3R5cGVfcG93GAYgASgFEhIKCkJfdHlwZV9wb3cYByABKAUSEgoKQ190eXBl",
            "X3BvdxgIIAEoBSp4CgtwYWNrZXRfdHlwZRINCglMT0dJTl9SRVEQABINCglM",
            "T0dJTl9SRVMQARINCglVU0VSX0lORk8QAhIPCgtTWU5DX0lORk9fUxADEg8K",
            "C1NZTkNfSU5GT19DEAQSDAoIQ0hBVF9SRVEQBRIMCghDSEFUX1JFUxAGYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::DnaInfo.packet_type), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DnaInfo.PacketHeader_PB), global::DnaInfo.PacketHeader_PB.Parser, new[]{ "PacketSize", "PacketType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DnaInfo.LoginRequest), global::DnaInfo.LoginRequest.Parser, new[]{ "Id", "Passwd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DnaInfo.LoginResponse), global::DnaInfo.LoginResponse.Parser, new[]{ "ResponseCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DnaInfo.UserInfo), global::DnaInfo.UserInfo.Parser, new[]{ "IdentifyId", "ChannelNum", "SessionNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DnaInfo.SyncInfo_S), global::DnaInfo.SyncInfo_S.Parser, new[]{ "Users" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::DnaInfo.SyncInfo_S.Types.User), global::DnaInfo.SyncInfo_S.Types.User.Parser, new[]{ "UserId", "XPos", "YPos", "Vec", "Type", "ATypePow", "BTypePow", "CTypePow" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::DnaInfo.SyncInfo_C), global::DnaInfo.SyncInfo_C.Parser, new[]{ "UserId", "XPos", "YPos", "Vec", "Type", "ATypePow", "BTypePow", "CTypePow" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///  패킷의 헤더 정보
  /// </summary>
  public enum packet_type {
    [pbr::OriginalName("LOGIN_REQ")] LoginReq = 0,
    [pbr::OriginalName("LOGIN_RES")] LoginRes = 1,
    [pbr::OriginalName("USER_INFO")] UserInfo = 2,
    [pbr::OriginalName("SYNC_INFO_S")] SyncInfoS = 3,
    [pbr::OriginalName("SYNC_INFO_C")] SyncInfoC = 4,
    [pbr::OriginalName("CHAT_REQ")] ChatReq = 5,
    [pbr::OriginalName("CHAT_RES")] ChatRes = 6,
  }

  #endregion

  #region Messages
  /// <summary>
  ///  패킷들을 구분할 수 있는 헤더
  /// </summary>
  public sealed partial class PacketHeader_PB : pb::IMessage<PacketHeader_PB> {
    private static readonly pb::MessageParser<PacketHeader_PB> _parser = new pb::MessageParser<PacketHeader_PB>(() => new PacketHeader_PB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PacketHeader_PB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DnaInfo.ProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PacketHeader_PB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PacketHeader_PB(PacketHeader_PB other) : this() {
      packetSize_ = other.packetSize_;
      packetType_ = other.packetType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PacketHeader_PB Clone() {
      return new PacketHeader_PB(this);
    }

    /// <summary>Field number for the "packet_size" field.</summary>
    public const int PacketSizeFieldNumber = 1;
    private uint packetSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PacketSize {
      get { return packetSize_; }
      set {
        packetSize_ = value;
      }
    }

    /// <summary>Field number for the "packet_type" field.</summary>
    public const int PacketTypeFieldNumber = 2;
    private int packetType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PacketType {
      get { return packetType_; }
      set {
        packetType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PacketHeader_PB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PacketHeader_PB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PacketSize != other.PacketSize) return false;
      if (PacketType != other.PacketType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PacketSize != 0) hash ^= PacketSize.GetHashCode();
      if (PacketType != 0) hash ^= PacketType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PacketSize != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PacketSize);
      }
      if (PacketType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PacketType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PacketSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PacketSize);
      }
      if (PacketType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PacketType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PacketHeader_PB other) {
      if (other == null) {
        return;
      }
      if (other.PacketSize != 0) {
        PacketSize = other.PacketSize;
      }
      if (other.PacketType != 0) {
        PacketType = other.PacketType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PacketSize = input.ReadUInt32();
            break;
          }
          case 16: {
            PacketType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  로그인시 클라이언트에서 서버로 전송하는 패킷이다.
  /// </summary>
  public sealed partial class LoginRequest : pb::IMessage<LoginRequest> {
    private static readonly pb::MessageParser<LoginRequest> _parser = new pb::MessageParser<LoginRequest>(() => new LoginRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DnaInfo.ProtocolReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest(LoginRequest other) : this() {
      id_ = other.id_;
      passwd_ = other.passwd_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest Clone() {
      return new LoginRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    /// <summary>
    ///  유저의 id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "passwd" field.</summary>
    public const int PasswdFieldNumber = 3;
    private string passwd_ = "";
    /// <summary>
    ///  유저의 pw
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Passwd {
      get { return passwd_; }
      set {
        passwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Passwd != other.Passwd) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Passwd.Length != 0) hash ^= Passwd.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      if (Passwd.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Passwd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Passwd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Passwd);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Passwd.Length != 0) {
        Passwd = other.Passwd;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 26: {
            Passwd = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  로그인 요청 처리에 따른 서버의 응답 패킷이다.
  /// </summary>
  public sealed partial class LoginResponse : pb::IMessage<LoginResponse> {
    private static readonly pb::MessageParser<LoginResponse> _parser = new pb::MessageParser<LoginResponse>(() => new LoginResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DnaInfo.ProtocolReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse(LoginResponse other) : this() {
      responseCode_ = other.responseCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse Clone() {
      return new LoginResponse(this);
    }

    /// <summary>Field number for the "response_code" field.</summary>
    public const int ResponseCodeFieldNumber = 2;
    private int responseCode_;
    /// <summary>
    ///  처리에 대한 정보를 담고 있음
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResponseCode {
      get { return responseCode_; }
      set {
        responseCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResponseCode != other.ResponseCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResponseCode != 0) hash ^= ResponseCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResponseCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ResponseCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResponseCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResponseCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginResponse other) {
      if (other == null) {
        return;
      }
      if (other.ResponseCode != 0) {
        ResponseCode = other.ResponseCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            ResponseCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  채널 서버에서 유저 세션을 생성한 후 클라이언트로 보내주는 패킷이다.
  /// </summary>
  public sealed partial class UserInfo : pb::IMessage<UserInfo> {
    private static readonly pb::MessageParser<UserInfo> _parser = new pb::MessageParser<UserInfo>(() => new UserInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DnaInfo.ProtocolReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo(UserInfo other) : this() {
      identifyId_ = other.identifyId_;
      channelNum_ = other.channelNum_;
      sessionNum_ = other.sessionNum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo Clone() {
      return new UserInfo(this);
    }

    /// <summary>Field number for the "identify_id" field.</summary>
    public const int IdentifyIdFieldNumber = 2;
    private int identifyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IdentifyId {
      get { return identifyId_; }
      set {
        identifyId_ = value;
      }
    }

    /// <summary>Field number for the "channel_num" field.</summary>
    public const int ChannelNumFieldNumber = 3;
    private int channelNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChannelNum {
      get { return channelNum_; }
      set {
        channelNum_ = value;
      }
    }

    /// <summary>Field number for the "session_num" field.</summary>
    public const int SessionNumFieldNumber = 4;
    private int sessionNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SessionNum {
      get { return sessionNum_; }
      set {
        sessionNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IdentifyId != other.IdentifyId) return false;
      if (ChannelNum != other.ChannelNum) return false;
      if (SessionNum != other.SessionNum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IdentifyId != 0) hash ^= IdentifyId.GetHashCode();
      if (ChannelNum != 0) hash ^= ChannelNum.GetHashCode();
      if (SessionNum != 0) hash ^= SessionNum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IdentifyId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(IdentifyId);
      }
      if (ChannelNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChannelNum);
      }
      if (SessionNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SessionNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IdentifyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IdentifyId);
      }
      if (ChannelNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChannelNum);
      }
      if (SessionNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SessionNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserInfo other) {
      if (other == null) {
        return;
      }
      if (other.IdentifyId != 0) {
        IdentifyId = other.IdentifyId;
      }
      if (other.ChannelNum != 0) {
        ChannelNum = other.ChannelNum;
      }
      if (other.SessionNum != 0) {
        SessionNum = other.SessionNum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            IdentifyId = input.ReadInt32();
            break;
          }
          case 24: {
            ChannelNum = input.ReadInt32();
            break;
          }
          case 32: {
            SessionNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  동기화를 위해 서버에서 유저들의 정보들을 뿌려주기 위해 사용하는 패킷이다.
  /// </summary>
  public sealed partial class SyncInfo_S : pb::IMessage<SyncInfo_S> {
    private static readonly pb::MessageParser<SyncInfo_S> _parser = new pb::MessageParser<SyncInfo_S>(() => new SyncInfo_S());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SyncInfo_S> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DnaInfo.ProtocolReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncInfo_S() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncInfo_S(SyncInfo_S other) : this() {
      users_ = other.users_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncInfo_S Clone() {
      return new SyncInfo_S(this);
    }

    /// <summary>Field number for the "users" field.</summary>
    public const int UsersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::DnaInfo.SyncInfo_S.Types.User> _repeated_users_codec
        = pb::FieldCodec.ForMessage(18, global::DnaInfo.SyncInfo_S.Types.User.Parser);
    private readonly pbc::RepeatedField<global::DnaInfo.SyncInfo_S.Types.User> users_ = new pbc::RepeatedField<global::DnaInfo.SyncInfo_S.Types.User>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DnaInfo.SyncInfo_S.Types.User> Users {
      get { return users_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SyncInfo_S);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SyncInfo_S other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!users_.Equals(other.users_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= users_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      users_.WriteTo(output, _repeated_users_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += users_.CalculateSize(_repeated_users_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SyncInfo_S other) {
      if (other == null) {
        return;
      }
      users_.Add(other.users_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            users_.AddEntriesFrom(input, _repeated_users_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SyncInfo_S message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class User : pb::IMessage<User> {
        private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<User> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::DnaInfo.SyncInfo_S.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public User() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public User(User other) : this() {
          userId_ = other.userId_;
          xPos_ = other.xPos_;
          yPos_ = other.yPos_;
          vec_ = other.vec_;
          type_ = other.type_;
          aTypePow_ = other.aTypePow_;
          bTypePow_ = other.bTypePow_;
          cTypePow_ = other.cTypePow_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public User Clone() {
          return new User(this);
        }

        /// <summary>Field number for the "user_id" field.</summary>
        public const int UserIdFieldNumber = 1;
        private int userId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int UserId {
          get { return userId_; }
          set {
            userId_ = value;
          }
        }

        /// <summary>Field number for the "x_pos" field.</summary>
        public const int XPosFieldNumber = 2;
        private int xPos_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int XPos {
          get { return xPos_; }
          set {
            xPos_ = value;
          }
        }

        /// <summary>Field number for the "y_pos" field.</summary>
        public const int YPosFieldNumber = 3;
        private int yPos_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int YPos {
          get { return yPos_; }
          set {
            yPos_ = value;
          }
        }

        /// <summary>Field number for the "vec" field.</summary>
        public const int VecFieldNumber = 4;
        private int vec_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Vec {
          get { return vec_; }
          set {
            vec_ = value;
          }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 5;
        private int type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "A_type_pow" field.</summary>
        public const int ATypePowFieldNumber = 6;
        private int aTypePow_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ATypePow {
          get { return aTypePow_; }
          set {
            aTypePow_ = value;
          }
        }

        /// <summary>Field number for the "B_type_pow" field.</summary>
        public const int BTypePowFieldNumber = 7;
        private int bTypePow_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int BTypePow {
          get { return bTypePow_; }
          set {
            bTypePow_ = value;
          }
        }

        /// <summary>Field number for the "C_type_pow" field.</summary>
        public const int CTypePowFieldNumber = 8;
        private int cTypePow_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CTypePow {
          get { return cTypePow_; }
          set {
            cTypePow_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as User);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(User other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (UserId != other.UserId) return false;
          if (XPos != other.XPos) return false;
          if (YPos != other.YPos) return false;
          if (Vec != other.Vec) return false;
          if (Type != other.Type) return false;
          if (ATypePow != other.ATypePow) return false;
          if (BTypePow != other.BTypePow) return false;
          if (CTypePow != other.CTypePow) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (UserId != 0) hash ^= UserId.GetHashCode();
          if (XPos != 0) hash ^= XPos.GetHashCode();
          if (YPos != 0) hash ^= YPos.GetHashCode();
          if (Vec != 0) hash ^= Vec.GetHashCode();
          if (Type != 0) hash ^= Type.GetHashCode();
          if (ATypePow != 0) hash ^= ATypePow.GetHashCode();
          if (BTypePow != 0) hash ^= BTypePow.GetHashCode();
          if (CTypePow != 0) hash ^= CTypePow.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (UserId != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(UserId);
          }
          if (XPos != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(XPos);
          }
          if (YPos != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(YPos);
          }
          if (Vec != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(Vec);
          }
          if (Type != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(Type);
          }
          if (ATypePow != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(ATypePow);
          }
          if (BTypePow != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(BTypePow);
          }
          if (CTypePow != 0) {
            output.WriteRawTag(64);
            output.WriteInt32(CTypePow);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (UserId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
          }
          if (XPos != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(XPos);
          }
          if (YPos != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(YPos);
          }
          if (Vec != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Vec);
          }
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
          }
          if (ATypePow != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ATypePow);
          }
          if (BTypePow != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(BTypePow);
          }
          if (CTypePow != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(CTypePow);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(User other) {
          if (other == null) {
            return;
          }
          if (other.UserId != 0) {
            UserId = other.UserId;
          }
          if (other.XPos != 0) {
            XPos = other.XPos;
          }
          if (other.YPos != 0) {
            YPos = other.YPos;
          }
          if (other.Vec != 0) {
            Vec = other.Vec;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          if (other.ATypePow != 0) {
            ATypePow = other.ATypePow;
          }
          if (other.BTypePow != 0) {
            BTypePow = other.BTypePow;
          }
          if (other.CTypePow != 0) {
            CTypePow = other.CTypePow;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                UserId = input.ReadInt32();
                break;
              }
              case 16: {
                XPos = input.ReadInt32();
                break;
              }
              case 24: {
                YPos = input.ReadInt32();
                break;
              }
              case 32: {
                Vec = input.ReadInt32();
                break;
              }
              case 40: {
                Type = input.ReadInt32();
                break;
              }
              case 48: {
                ATypePow = input.ReadInt32();
                break;
              }
              case 56: {
                BTypePow = input.ReadInt32();
                break;
              }
              case 64: {
                CTypePow = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///  동기화를 위해 클라이언트에서 서버로 주기적으로 보내주는 패킷이다.
  /// </summary>
  public sealed partial class SyncInfo_C : pb::IMessage<SyncInfo_C> {
    private static readonly pb::MessageParser<SyncInfo_C> _parser = new pb::MessageParser<SyncInfo_C>(() => new SyncInfo_C());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SyncInfo_C> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DnaInfo.ProtocolReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncInfo_C() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncInfo_C(SyncInfo_C other) : this() {
      userId_ = other.userId_;
      xPos_ = other.xPos_;
      yPos_ = other.yPos_;
      vec_ = other.vec_;
      type_ = other.type_;
      aTypePow_ = other.aTypePow_;
      bTypePow_ = other.bTypePow_;
      cTypePow_ = other.cTypePow_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncInfo_C Clone() {
      return new SyncInfo_C(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private int userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "x_pos" field.</summary>
    public const int XPosFieldNumber = 2;
    private int xPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int XPos {
      get { return xPos_; }
      set {
        xPos_ = value;
      }
    }

    /// <summary>Field number for the "y_pos" field.</summary>
    public const int YPosFieldNumber = 3;
    private int yPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int YPos {
      get { return yPos_; }
      set {
        yPos_ = value;
      }
    }

    /// <summary>Field number for the "vec" field.</summary>
    public const int VecFieldNumber = 4;
    private int vec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Vec {
      get { return vec_; }
      set {
        vec_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "A_type_pow" field.</summary>
    public const int ATypePowFieldNumber = 6;
    private int aTypePow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ATypePow {
      get { return aTypePow_; }
      set {
        aTypePow_ = value;
      }
    }

    /// <summary>Field number for the "B_type_pow" field.</summary>
    public const int BTypePowFieldNumber = 7;
    private int bTypePow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BTypePow {
      get { return bTypePow_; }
      set {
        bTypePow_ = value;
      }
    }

    /// <summary>Field number for the "C_type_pow" field.</summary>
    public const int CTypePowFieldNumber = 8;
    private int cTypePow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CTypePow {
      get { return cTypePow_; }
      set {
        cTypePow_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SyncInfo_C);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SyncInfo_C other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (XPos != other.XPos) return false;
      if (YPos != other.YPos) return false;
      if (Vec != other.Vec) return false;
      if (Type != other.Type) return false;
      if (ATypePow != other.ATypePow) return false;
      if (BTypePow != other.BTypePow) return false;
      if (CTypePow != other.CTypePow) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (XPos != 0) hash ^= XPos.GetHashCode();
      if (YPos != 0) hash ^= YPos.GetHashCode();
      if (Vec != 0) hash ^= Vec.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (ATypePow != 0) hash ^= ATypePow.GetHashCode();
      if (BTypePow != 0) hash ^= BTypePow.GetHashCode();
      if (CTypePow != 0) hash ^= CTypePow.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserId);
      }
      if (XPos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(XPos);
      }
      if (YPos != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(YPos);
      }
      if (Vec != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Vec);
      }
      if (Type != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Type);
      }
      if (ATypePow != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ATypePow);
      }
      if (BTypePow != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(BTypePow);
      }
      if (CTypePow != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CTypePow);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (XPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(XPos);
      }
      if (YPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(YPos);
      }
      if (Vec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Vec);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (ATypePow != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ATypePow);
      }
      if (BTypePow != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BTypePow);
      }
      if (CTypePow != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CTypePow);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SyncInfo_C other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.XPos != 0) {
        XPos = other.XPos;
      }
      if (other.YPos != 0) {
        YPos = other.YPos;
      }
      if (other.Vec != 0) {
        Vec = other.Vec;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.ATypePow != 0) {
        ATypePow = other.ATypePow;
      }
      if (other.BTypePow != 0) {
        BTypePow = other.BTypePow;
      }
      if (other.CTypePow != 0) {
        CTypePow = other.CTypePow;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt32();
            break;
          }
          case 16: {
            XPos = input.ReadInt32();
            break;
          }
          case 24: {
            YPos = input.ReadInt32();
            break;
          }
          case 32: {
            Vec = input.ReadInt32();
            break;
          }
          case 40: {
            Type = input.ReadInt32();
            break;
          }
          case 48: {
            ATypePow = input.ReadInt32();
            break;
          }
          case 56: {
            BTypePow = input.ReadInt32();
            break;
          }
          case 64: {
            CTypePow = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
